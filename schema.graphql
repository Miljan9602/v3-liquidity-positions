type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Collect @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  recipient: Bytes! # address
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DecreaseLiquidity @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  liquidity: BigInt! # uint128
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IncreaseLiquidity @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  liquidity: BigInt! # uint128
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Token @entity(immutable: true) {
  id: Bytes!
  decimals: BigInt!
  symbol: String!
  name: String!
}

type LiquidityPosition @entity {
  id: Bytes!
  owner: Bytes! # address
  liquidity: BigInt! # uint128
  token0: String!
  token1: String!
  fee: BigInt!
  poolAddress: String!

  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  lastUpdatedBlockNumber: BigInt!
  lastUpdatedBlockTimestamp: BigInt!
}